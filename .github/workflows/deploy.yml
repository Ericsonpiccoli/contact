name: Deploy to EC2

on:
  push:
    branches:
      - main  # ou a branch que você usa para produção

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker images
        run: |
          docker build -t my-php-app -f Dockerfile-php .
          docker build -t my-node-app -f Dockerfile-node .
          echo "$DOCKERPASSWORD" | docker login -u "$DOCKERUSERNAME" --password-stdin
          docker tag my-php-app ${{ secrets.DOCKERUSERNAME }}/my-php-app:latest
          docker tag my-node-app ${{ secrets.DOCKERUSERNAME }}/my-node-app:latest
          docker push ${{ secrets.DOCKERUSERNAME }}/my-php-app:latest
          docker push ${{ secrets.DOCKERUSERNAME }}/my-node-app:latest

      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2SSHKEY }}
          HOST: ${{ secrets.EC2HOST }}
          USER: ${{ secrets.EC2USER }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            # Navegue para o diretório onde está o docker-compose.yml
            cd /var/www/html
            
            # Puxe as últimas imagens do Docker Hub
            docker-compose pull
            
            # Suba os containers em modo destacado
            docker-compose up -d
            
            # Verifique o status dos containers
            docker-compose ps
          EOF
